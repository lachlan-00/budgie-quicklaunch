#!/usr/bin/env python3

""" pylaunch: Python quick launcher
    ----------------Authors----------------
    Lachlan de Waard <lachlan.00@gmail.com>
    ----------------Licence----------------
    GNU General Public License version 3

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""

import gi
import os
import subprocess

gi.require_version('Gtk', '3.0')
gi.require_version('Budgie', '1.0')
from gi.repository import Budgie, GObject, Gio, Gtk, Gdk


USER_HOME = os.getenv('HOME')
QUICK_STORE = USER_HOME + '/.local/share/quicklaunch'
WINDOWOPEN = False
WINDOWSPOSITION = None
UUID = None


class BudgieQuicklaunch(GObject.GObject, Budgie.Plugin):
    """ This is simply an entry point into your Budgie Applet implementation.
        Note you must always override Object, and implement Plugin.
    """

    # Good manners, make sure we have unique name in GObject type system
    __gtype_name__ = "budgie-quicklaunch"

    def __init__(self):
        """ Initialisation is important.
        """
        GObject.Object.__init__(self)

    def do_get_panel_widget(self, uuid):
        """ This is where the real fun happens. Return a new Budgie.Applet
            instance with the given UUID. The UUID is determined by the
            BudgiePanelManager, and is used for lifetime tracking.
        """
        return PyLaunchApplet(uuid)


class PyLaunchSettings(Gtk.Grid):
    def __init__(self, setting):
        super().__init__(row_spacing=8)
        self.setting = setting

        # Settings inferface objects
        label = Gtk.Label(_("Launcher Path"), halign=Gtk.Align.START)
        entry = Gtk.Entry()
        entry.set_width_chars(40)
        entry.set_text(setting.get_string("folder-path"))

        # Attach to settings grid
        self.attach(label, 0, 0, 1, 1)
        self.attach(entry, 0, 1, 2, 1)

        # Bind dconf setting to the entry box
        setting.bind("folder-path", entry, 'text',
                     Gio.SettingsBindFlags.DEFAULT)

        self.show_all()


class PyLaunchApplet(Budgie.Applet):
    """ Budgie.Applet is in fact a Gtk.Bin """
    def __init__(self, uuid):
        Budgie.Applet.__init__(self)
        self.uuid = uuid

        # Ensure schema and prefix is set properly
        self.set_settings_prefix("/org/lachlandewaard/budgie-quicklaunch")
        self.set_settings_schema("org.lachlandewaard.budgie-quicklaunch")
        self.settings = self.get_applet_settings(self.uuid)

        # Add a button to the Budgie panel
        self.button = Gtk.ToggleButton.new()
        self.button.set_relief(Gtk.ReliefStyle.NONE)
        self.button.set_active(False)
        self.add(self.button)

        img = Gtk.Image.new_from_icon_name("start-here-symbolic", Gtk.IconSize.BUTTON)
        self.button.add(img)
        self.button.set_tooltip_text("Quicklauncher (from Python!)")

        # Hook up Applet button signals
        self.button.connect_after('clicked', self.status_clicked)
        self.button.connect_after('popup-menu', self.right_click_event)

        """ start pylaunch """
        self.builder = Gtk.Builder()
        self.builder.add_from_file('/usr/lib/budgie-desktop/plugins/budgie-quicklaunch/main.ui')
        self.builder.connect_signals(self)
        self.current_files = None
        self.filelist = None

        # load main window items
        self.window = self.builder.get_object('main_window')
        self.contentlist = self.builder.get_object('filestore')
        self.contenttree = self.builder.get_object('fileview')

        # create lists and connect actions
        self.connectui()
        self.listfiles(self.settings.get_string("folder-path"))
        self.run()

    def do_get_settings_ui(self):
        """ Return the applet settings with given uuid """
        global UUID
        UUID = self.uuid
        return PyLaunchSettings(self.get_applet_settings(self.uuid))

    def do_supports_settings(self):
        """ Tell budgie we support settings through Budgie Settings """
        return True

    def connectui(self):
        """ connect all the window widgets """
        cell = Gtk.CellRendererText()
        filecolumn = Gtk.TreeViewColumn('PyLaunch Shortcuts', cell, text=0)

        # main window actions
        self.window.connect('destroy', self.quit)
        self.window.connect('focus', self.save_position)
        self.window.connect('window-state-event', self.save_position)
        self.window.connect('button-release-event', self.save_position)
        self.window.connect('drag-end', self.save_position)
        self.contenttree.connect('row-activated', self.loadselection)
        self.contenttree.connect('button-release-event', self.buttonclick)
        self.contenttree.append_column(filecolumn)
        self.contenttree.set_model(self.contentlist)

        # list default dir on startup
        if not os.path.isdir(self.settings.get_string("folder-path")):
            os.makedirs(self.settings.get_string("folder-path"))
        return

    def run(self):
        """ show the main window and start the main GTK loop """
        self.set_position()
        self.show_all()

    def buttonclick(self, actor, event):
        """ Catch mouse clicks"""
        if actor == self.contenttree:
            if Gdk.ModifierType.BUTTON2_MASK == event.get_state():
                print('middle click')
                return actor
            elif Gdk.ModifierType.BUTTON3_MASK == event.get_state():
                print('right click')
                return actor
        return

    def right_click_event(self, icon, button, time):
        return

    def status_clicked(self, status):
        """ hide and unhide the window when clicking the status icon """
        global WINDOWOPEN
        # Unhide the window
        if not WINDOWOPEN:
            self.set_position()
            self.window.show()
            WINDOWOPEN = True
        elif WINDOWOPEN:
            self.delete_event(self, self.window)
        return status

    def set_position(self):
        """ move the main window to last known position """
        try:
            self.window.move(self.settings.get_int("root-x"), self.settings.get_int("root-y"))
            self.window.resize(self.settings.get_int("width"), self.settings.get_int("height"))
        except ValueError:
            # incorrect value for setting
            pass
        return

    def save_position(self, actor, event):
        """ save the main window position """
        self.settings.set_int("root-x", self.window.get_position().root_x)
        self.settings.set_int("root-y", self.window.get_position().root_y)
        self.settings.set_int("height", self.window.get_size().height)
        self.settings.set_int("width", self.window.get_size().width)
        self.listfiles(self.settings.get_string("folder-path"))
        return

    def delete_event(self, window, event):
        """ Hide the window then the close button is clicked """
        global WINDOWOPEN
        self.save_position(self.window, 'hiding')
        self.window.hide_on_delete()
        WINDOWOPEN = False
        return True

    def loadselection(self, *args):
        """ load selected files into tag editor """
        global WINDOWOPEN
        contenttree = args[0]
        model, fileiter = contenttree.get_selection().get_selected_rows()
        self.current_files = []
        for files in fileiter:
            if model[files][0] == '[No files found]':
                self.current_files = []
            else:
                tmp_file = os.path.join(self.settings.get_string("folder-path"), model[files][0])
                if os.access(tmp_file, os.X_OK):
                    self.current_files.append(tmp_file)
                else:
                    print(tmp_file + '\nIs not executable')
        if not self.current_files == []:
            print("Opening selected file")
            print(self.current_files)
            subprocess.Popen(self.current_files)
            # Hide and deactivate applet button after selection
            self.button.set_active(False)
        else:
            print('relisting directory')
            self.listfiles(self.settings.get_string("folder-path"))
        return

    def quit(self, *args):
        """ stop the process thread and close the program"""
        # destroy windows and quit
        self.window.destroy()
        return False

    def listfiles(self, srcpath):
        """ function to fill the file list column """
        self.current_files = []
        try:
            files_dir = os.listdir(srcpath)
            files_dir.sort(key=lambda y: y.lower())
        except OSError:
            return
        # clear list if we have scanned before
        for items in self.contentlist:
            self.contentlist.remove(items.iter)
        # clear combobox before adding entries
        for items in self.contenttree:
            self.contenttree.remove(items.iter)
        # search the supplied directory for items
        for items in files_dir:
            test_executable = None
            tmp_file = self.settings.get_string("folder-path") + '/' + items
            test_file = os.path.isfile(tmp_file)
            if test_file:
                test_executable = os.access(tmp_file, os.X_OK)
            if not items[0] == '.' and test_file and test_executable:
                self.contentlist.append([items])
        if len(self.contentlist) == 0:
            self.contentlist.append(['[No files found]'])
        return

